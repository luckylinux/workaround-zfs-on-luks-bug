#!/bin/sh

# Print every Command being executed
set -x

# Define "losetup" Executable Path
LOSETUP_BIN="/usr/sbin/losetup-full"                                                  # Production (IMPORTANT: on the Real System it is /usr/sbin/losetup, in the initramfs it is /usr/bin/losetup !!!) - "losetup" also works correctly though
#LOSETUP_BIN="/usr/src/initramfs-investigation/6.8.0-40-generic/main/usr/bin/losetup" # Testing with uncompressed initramfs

# Define "losetup" Command-Line Options
LOSETUP_OPTIONS="-b 4096"

# Check if Command Exists
# If not, default to "losetup"
if [ ! -x "${LOSETUP_BIN}" ]
then
    # Echo
    echo "WARNING: the specified losetup Binary ${LOSETUP_BIN} could NOT be found and/or is NOT executable."

    if [ -x "/usr/bin/losetup" ]
    then
       LOSETUP_BIN="/usr/bin/losetup"
    elif [ -x "/usr/sbin/losetup" ]
    then
       LOSETUP_BIN="/usr/sbin/losetup"
    else
       # Echo
       echo "WARNING: losetup Binary couldn't be automatically Detected. Defaulting to <losetup>"

       # Default Value
       LOSETUP_BIN="losetup"
    fi
fi

# Echo
echo "INFO: Using losetup Executable / Command: ${LOSETUP_BIN}"

# Add new Line
echo -e "\n"

# Echo
echo "Setting up Loop Devices based on /etc/looptab"

if [ -f "/etc/looptab" ]
then
	# Read Configuration File (exclude Comment Lines)
	value=`cat /etc/looptab | grep -vE "^#"`
else
	# Error
	echo "ERROR: File /etc/looptab does NOT exist. Exiting."
        exit 9
fi

# Create /dev/loop Folder
if [ ! -d "/dev/loop" ]
then
    mkdir -p "/dev/loop"
fi

# Initialize Counter
loopDeviceCounter=0

# Iterate over each Device
cat /etc/looptab | grep -vE "^#" | while IFS= read -r line;
do
    # Echo
    echo "Processing Line: $line"

    # Extract "ID"
    loopDeviceNumber=`echo "$line" | cut -f1 -d'	'`

    # Extract "Source" (LUKS) Device (full Path)
    sourceDevice=`echo "$line" | cut -f2 -d'	'`

    # Extract "Loop" Device with Custom Name (full Path)
    loopDeviceCustomName=`echo "$line" | cut -f3 -d'	'`

    # Build "Standardized" Device Path
    loopDevicePath="/dev/loop$loopDeviceNumber"

    # Check if Device Exists
    if [ -b $sourceDevice ]
    then
        # Echo
        echo "Check Loop Device Status - Executing Command: ${LOSETUP_BIN} $loopDevicePath"

        # Check Status of Loop Device /dev/loopX to see if already mounted
        checkStatus=`${LOSETUP_BIN} $loopDevicePath`

        # Error code 0: Device exists and is initialized, code != 0 (e.g. 1): Device is not initialized
        loopDeviceStatusCode=$?

        # Setup Loop Device ? By Default Yes !
        setupLoopDevice=1

        if [ $loopDeviceStatusCode -eq 0 ]
        then
            # Echo
            echo "Device $loopDevicePath is already used. Details: $checkStatus"

            # Ask if wanting to Remove it
            #echo "Do you want to stop/remove Device $loopDevicePath (y/n)?"
            #read removeLoopDevice < /dev/tty
            read -p "Do you want to stop/remove Device $loopDevicePath (y/n) ? " removeLoopDevice < /dev/tty

            if [ "$removeLoopDevice" != "${removeLoopDevice#[Yy]}" ]
            then
                 # Echo
                 echo "Removing Device $loopDevicePath before Re-Initializing it"

                 # Remove Device
                 ${LOSETUP_BIN} -d $loopDevicePath
            else
                 # Echo
                 echo "Skip Device $loopDevicePath Removal as requested by User"

                 # Need to Mark that Device must NOT be (attempted to be) Setup again
                 setupLoopDevice=0
            fi

            # Sleep a bit
            sleep 1
        fi

        if [ $setupLoopDevice -eq 1 ]
        then
            # Echo
            echo "Mount Loop Device - Executing Command: ${LOSETUP_BIN} ${LOSETUP_OPTIONS} $loopDevicePath $sourceDevice"

            # Mount Source Device to Loop Device
            ${LOSETUP_BIN} ${LOSETUP_OPTIONS} $loopDevicePath $sourceDevice
        fi

        # Check if Symlink already exists - If it already exists, delete the old Symlink
        if [ -L $loopDeviceCustomName ]
        then
            # Echo
            echo "Symlink $loopDeviceCustomName already exists. Deleting it before recreating it."

            # Remove Existing Link
            rm $loopDeviceCustomName
        fi

        # Echo
        echo "Create Symlink $loopDeviceCustomName pointing to $loopDevicePath"

        # (Re)Create a Symlink for more Convenience in /dev/loop/ Subfolder
        ln -s $loopDevicePath $loopDeviceCustomName

        # Increase Counter
        loopDeviceCounter=$((loopDeviceCounter+1))
    else
        # Echo
        echo "Source Device $sourceDevice does NOT exist and/or is NOT a Block Device"
    fi

    # Wait a bit
    sleep 1
done

# Return OK Code
exit 0
