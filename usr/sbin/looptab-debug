#!/bin/sh

# Optional Argument:
# - $1: "Source" (not parsed, e.g. "Initramgs" , "/etc/rc.local", ...)
# - $2: "Message" (not parsed)
sourceValue="${1-unspecified}"
messageValue="${2-unspecified}"

# Print every Command being executed
set -x

# Where to save Files
if [ -d "/var/log" ]
then
   # Use /var/log for saving Data
   LOG_BASEFOLDER="/var/log"
elif [ -d "/run/initramfs" ]
then
   # Use /run/initramfs for saving Data
   LOG_BASEFOLDER="/run/initramfs"
fi

# IOStat Debugging
IOSTAT_INTERVAL="1"
IOSTAT_COUNT=500

# Echo
echo "Executing $0 from Source=$sourceValue (Message: $messageValue)"

# Netcat Configuration
# Load from File if it exists
if [ -f "/etc/netcat" ]
then
   # Load Configuration (it's a Shell Script)
   echo "Loading netcat Configuration from /etc/netcat"
   . /etc/netcat
else
   # Echo
   echo "Using hardcoded netcat Configuration Values"

   # Hardcoded Fallback Configuration
   NC_BIN="/usr/bin/nc-full"
   NC_HOST="192.168.3.66"
   NC_PORT="12345"
   NC_OPTIONS="-N -n -v ${NC_HOST} ${NC_PORT}"
fi

# Check if Command Exists
# If not, default to "nc"
if [ ! -x "${NC_BIN}" ]
then
    # Echo
    echo "WARNING: the specified nc Binary ${NC_BIN} could NOT be found and/or is NOT executable."

    if [ -x "/usr/bin/nc" ]
    then
       NC_BIN="/usr/bin/nc"
    elif [ -x "/usr/sbin/nc" ]
    then
       NC_BIN="/usr/sbin/nc"
    else
       # Echo
       echo "WARNING: nc Binary couldn't be automatically Detected. Defaulting to <nc>"

       # Default Value
       NC_BIN="nc"
    fi
fi

# Custom Pipe Function to do both echo/cat AND piping to netcat
log_data() {
    # Read data into a local variable
    #local

    # Just get stdin, pass it to tee and print it to the Console, then feed it to Netcat
    cat /dev/stdin | tee /dev/tty | ${NC_BIN} ${NC_OPTIONS}
}

# Echo again to Netcat this Time
echo "Executing $0 from Source=$sourceValue (Message: $messageValue)" | log_data

# Echo
echo "Saving Logs to LOG_BASEFOLDER = ${LOG_BASEFOLDER}" log_data

# Define "losetup" Executable Path
LOSETUP_BIN="/usr/sbin/losetup-full"                                                  # Production (IMPORTANT: on the Real System it is /usr/sbin/losetup, in the initramfs it is /usr/bin/losetup !!!) - "losetup" also works correctly though
#LOSETUP_BIN="/usr/src/initramfs-investigation/6.8.0-40-generic/main/usr/bin/losetup" # Testing with uncompressed initramfs

# Define "losetup" Command-Line Options
LOSETUP_OPTIONS="-b 4096"

# Timestamp
TIMESTAMP=`date +"%Y%m%d-%H%M%S"`

# Custom Function to send IOStat to Netcat
send_iostat_to_netcat() {
    # Initialize counter
    local netcatLoopCounter=0

    # Initialize Variable
    local currentTimestamp=""

    while [ $netcatLoopCounter -lt ${IOSTAT_COUNT} ]
    do
        # Current Time
        currentTimestamp=`date +"%Y%m%d_%H%M%S"`

        # Echo
        echo "Start Sending ${LOG_BASEFOLDER}/iostat.debug.$TIMESTAMP at Datetime = $currentTimestamp"  | log_data
        echo "============================================================================================================================================================" | log_data

        # Send Data
        cat ${LOG_BASEFOLDER}/iostat.debug.$TIMESTAMP | log_data

        # Echo
        echo "Finished Sending ${LOG_BASEFOLDER}/iostat.debug.$TIMESTAMP at Datetime = $currentTimestamp"  | log_data
        echo "============================================================================================================================================================" | log_data

        # Wait
        sleep ${IOSTAT_INTERVAL}

        # Increase Counter
        netcatLoopCounter=$((netcatLoopCounter+1))
    done

    # Exit Gracefully
    return 0
}


# Echo
echo "============================================================================================================================================================" | log_data
echo "============================================================================================================================================================" | log_data
echo "============================================================================================================================================================" | log_data
echo "Starting DEBUG at $TIMESTAMP"  | log_data

# Check if Command Exists
# If not, default to "losetup"
if [ ! -x "${LOSETUP_BIN}" ]
then
    # Echo
    echo "WARNING: the specified losetup Binary ${LOSETUP_BIN} could NOT be found and/or is NOT executable." | log_data

    if [ -x "/usr/bin/losetup" ]
    then
       LOSETUP_BIN="/usr/bin/losetup"
    elif [ -x "/usr/sbin/losetup" ]
    then
       LOSETUP_BIN="/usr/sbin/losetup"
    else
       # Echo
       echo "WARNING: losetup Binary couldn't be automatically Detected. Defaulting to <losetup>" | log_data

       # Default Value
       LOSETUP_BIN="losetup"
    fi
fi

# Debug Shell
echo "Shell Information" | log_data
echo "============================================================================================================================================================" | log_data
echo "SHELL=$SHELL" | log_data
echo "0=$0"  | log_data
echo "============================================================================================================================================================" | log_data

# Debug Environment
echo "Environment Information" | log_data
echo "============================================================================================================================================================" | log_data
printenv | log_data
echo "============================================================================================================================================================" | log_data

# Echo
echo "INFO: Using losetup Executable / Command: ${LOSETUP_BIN}" | log_data

# List /dev/mapper/ Devices
echo "List of /dev/mapper/ Devices" | log_data
echo "============================================================================================================================================================" | log_data
ls -l /dev/mapper/* | log_data
echo "============================================================================================================================================================" | log_data

# List /dev/loop/ Devices
echo "List of /dev/loop/ Devices" | log_data
echo "============================================================================================================================================================" | log_data
ls -l /dev/loop/* | log_data
echo "============================================================================================================================================================" | log_data

# Get Output of zpool status -v
echo "Get zpool status Output" | log_data
echo "============================================================================================================================================================" | log_data
zpool status -v | log_data
echo "============================================================================================================================================================" | log_data

# Get Output of zfs version
echo "Get zfs version Output" | log_data
echo "============================================================================================================================================================" | log_data
zfs version | log_data
echo "============================================================================================================================================================" | log_data

# Get Kernel Version
echo "Get Kernel version Output" | log_data
echo "============================================================================================================================================================" | log_data
uname -a | log_data
echo "============================================================================================================================================================" | log_data

# Get Output of zdb -C
echo "Get zdb -C Output" | log_data
echo "============================================================================================================================================================" | log_data
zdb -C | log_data
echo "============================================================================================================================================================" | log_data

# Get Outout of zpool get path rpool all-vdevs
echo "Get zpool get path rpool all-vdevs Output" | log_data
echo "============================================================================================================================================================" | log_data
zpool get path rpool all-vdevs | log_data
echo "============================================================================================================================================================" | log_data

# Get Outout of zpool get all rpool
echo "Get zpool get all rpool Output" | log_data
echo "============================================================================================================================================================" | log_data
zpool get all rpool | log_data
echo "============================================================================================================================================================" | log_data

# Get Outout of zpool get all rpool all-vdevs
echo "Get zpool get all rpool all-vdevs Output" | log_data
echo "============================================================================================================================================================" | log_data
zpool get all rpool all-vdevs | log_data
echo "============================================================================================================================================================" | log_data

# Iterate over each Device
echo "Analysing Loop Device Details" | log_data
#loopDevicesList=""
#luksDevicesList=""
#physicalDevicesList=""

# Initialize Device List
set -- ""

cat /etc/looptab | grep -vE "^#" | while IFS= read -r line;
do
    # Extract "ID"
    loopDeviceNumber=`echo "$line" | cut -f1 -d'	'`

    # Extract "Source" Device (full Path)
    sourceDevice=`echo "$line" | cut -f2 -d'	'`

    # Extract "Loop" Device with Custom Name (full Path)
    loopDeviceCustomName=`echo "$line" | cut -f3 -d'	'`

    # Build "Standardized" Device Path
    loopDevicePath="/dev/loop$loopDeviceNumber"

    # Check if Device Exists
    if [ -b $loopDevicePath ]
    then
        # Echo
        echo "Check Loop Device Information for $loopDevicePath"| log_data
        echo "Executing Command: ${LOSETUP_BIN} $loopDevicePath" | log_data
        echo "============================================================================================================================================================" | log_data

        # Run Command
        ${LOSETUP_BIN} --verbose $loopDevicePath --list --output NAME,SIZELIMIT,OFFSET,AUTOCLEAR,RO,BACK-FILE,DIO,LOG-SEC,BACK-INO,BACK-MAJ:MIN,MAJ:MIN,PARTSCAN | log_data

        echo "============================================================================================================================================================" | log_data

        # Add to List for iostat Processing later on
        #loopDevicesList="${loopDevicesList} ${loopDeviceCustomName}"
        #luksDevicesList="${luksDevicesList} ${sourceDevice}"

        # Determine the associated Physical Device
        physicalDeviceWithPartition=`lsblk -s -npo pkname ${sourceDevice} | head -n1`
        physicalDevice=`lsblk -npo pkname ${physicalDeviceWithPartition} | head -n1`
        #physicalDevicesList="${physicalDevicesList} ${physicalDevice}"

        # Append to Device List
        set -- $@ ${loopDeviceCustomName} ${sourceDevice} ${physicalDevice}
    fi
done

# Get dmsetup table Output
echo "Analysing dmsetup Table Ouput" | log_data
echo "============================================================================================================================================================" | log_data
dmsetup table | log_data
echo "============================================================================================================================================================" | log_data

# Get lsblk Output
echo "Analysing lsblk Ouput" | log_data
echo "============================================================================================================================================================" | log_data
lsblk --all --bytes -to +START,SIZE,TYPE --output NAME,ALIGNMENT,MIN-IO,OPT-IO,PHY-SEC,LOG-SEC,ROTA,SCHED,RQ-SIZE,RA,WSAME,START,SIZE,TYPE,MAJ:MIN | log_data
echo "============================================================================================================================================================" | log_data

# Get a "one-off" iostat Output
echo "Analysing iostat Ouput (one-off)" | log_data
echo "============================================================================================================================================================" | log_data
#set -- ${physicalDevicesList} ${luksDevicesList} ${loopDevicesList}
iostat -dk -zyx $@ ${IOSTAT_INTERVAL} 1 | log_data
echo "============================================================================================================================================================" | log_data

# Launch "iostat" in the Background and save to File
echo "Launching iostat in the Background and saving Results to ${LOG_BASEFOLDER}/iostat.debug.$TIMESTAMP" | log_data
touch ${LOG_BASEFOLDER}/iostat.debug.$TIMESTAMP
#set -- ${physicalDevicesList} ${luksDevicesList} ${loopDevicesList}
iostat -dk -zyx $@ ${IOSTAT_INTERVAL} ${IOSTAT_COUNT} > ${LOG_BASEFOLDER}/iostat.debug.$TIMESTAMP &

# Then try to periodically send via Netcat
send_iostat_to_netcat &

# Force zpool reopen
# Disabled for testing on Real Booting System
#zpool reopen
#zpool reopen rpool

# Echo
echo "Ending DEBUG at $TIMESTAMP"  | log_data
echo "============================================================================================================================================================" | log_data
echo "============================================================================================================================================================" | log_data
echo "============================================================================================================================================================" | log_data

# Send Contents of /run/initramfs/initramfs.debug to Remote Netcat Server
if [ -f "/run/initramfs/initramfs.debug" ]
then
   echo "Sending /run/initramfs/initramfs.debug to Remote Netcat Server" | log_data
   echo "============================================================================================================================================================" | log_data
   cat "/run/initramfs/initramfs.debug" | log_data
   echo "============================================================================================================================================================" | log_data
fi

# Copy /run/initramfs/initramfs.debug to /var/log/initramfs.debug.$TIMESTAMP
if [ -f "/run/initramfs/initramfs.debug" ]
then
   echo "Copying /run/initramfs/initramfs.debug to /var/log/initramfs.debug.$TIMESTAMP" | log_data
   cp "/run/initramfs/initramfs.debug" "/var/log/initramfs.debug.$TIMESTAMP"
fi

# Send Contents of dmesg to Remote Netcat Server
echo "Sending dmesg to Remote Netcat Server" | log_data
echo "============================================================================================================================================================" | log_data
dmesg | log_data
echo "============================================================================================================================================================" | log_data

# Dump dmesg to ${LOG_BASEFOLDER}/dmesg.debug.$TIMESTAMP
echo "Dumping dmesg to ${LOG_BASEFOLDER}/dmesg.debug.$TIMESTAMP"
dmesg > "${LOG_BASEFOLDER}/dmesg.debug.$TIMESTAMP" 2>&1

# Return OK Code
exit 0
