#!/bin/sh

# Optional Argument:
# - $1: "Source" (not parsed, e.g. "Initramgs" , "/etc/rc.local", ...)
# - $2: "Message" (not parsed)
sourceValue="${1-unspecified}"
messageValue="${2-unspecified}"

# Print every Command being executed
set -x

# Where to save Files
if [ -d "/var/log" ]
then
   # Use /var/log for saving Data
   LOG_BASEFOLDER="/var/log"
elif [ -d "/run/initramfs" ]
then
   # Use /run/initramfs for saving Data
   LOG_BASEFOLDER="/run/initramfs"
fi

# IOStat Debugging
IOSTAT_INTERVAL="1"
IOSTAT_COUNT=60

# Try to disable these if you have problems getting the full log over netcat (this creates additional write Requests to the already misbehaving Drive)
IOSTAT_ENABLE_ONEOFF=0
IOSTAT_ENABLE_LOOP=0
IOSTAT_ENABLE_MANUAL_SEND=0

# Custom Commands
ECHO_CMD="/usr/bin/echo"
#PRINTF_CMD="/usr/bin/printf"
CAT_CMD="/usr/bin/cat"

# Echo
${ECHO_CMD} "Executing $0 from Source=$sourceValue (Message: $messageValue)"

# Netcat Configuration
# Load from File if it exists
if [ -f "/etc/netcat" ]
then
   # Load Configuration (it's a Shell Script)
   ${ECHO_CMD} "Loading netcat Configuration from /etc/netcat"
   . /etc/netcat
else
   # Echo
   ${ECHO_CMD} "Using hardcoded netcat Configuration Values"

   # Hardcoded Fallback Configuration
   NC_BIN="/usr/bin/nc-full"
   NC_HOST="192.168.3.66"
   NC_PORT="12345"
   NC_OPTIONS="-N -n -v ${NC_HOST} ${NC_PORT}"
fi

# Check if Command Exists
# If not, default to "nc"
if [ ! -x "${NC_BIN}" ]
then
    # Echo
    ${ECHO_CMD} "WARNING: the specified nc Binary ${NC_BIN} could NOT be found and/or is NOT executable."

    if [ -x "/usr/bin/nc" ]
    then
       NC_BIN="/usr/bin/nc"
    elif [ -x "/usr/sbin/nc" ]
    then
       NC_BIN="/usr/sbin/nc"
    else
       # Echo
       ${ECHO_CMD} "WARNING: nc Binary couldn't be automatically Detected. Defaulting to <nc>"

       # Default Value
       NC_BIN="nc"
    fi
fi

# Custom Pipe Function to do both echo/cat AND piping to netcat
log_data() {
    # Just get stdin, pass it to tee and print it to the Console, then feed it to Netcat
    cat /dev/stdin | tee /dev/tty0 | ${NC_BIN} ${NC_OPTIONS}

    # Read data into a local variable
    #ldata=`cat`

    # First echo the Content to stdout
    #${ECHO_CMD} -e "$ldata"

    # Then do a Pipe to Netcat
    #${ECHO_CMD} -e "$ldata" | ${NC_BIN} ${NC_OPTIONS}

    # Return Gracefully
    #return 0
}

# Echo again to Netcat this Time
${ECHO_CMD} "Executing $0 from Source=$sourceValue (Message: $messageValue)" | log_data

# Echo
${ECHO_CMD} "Saving Logs to LOG_BASEFOLDER = ${LOG_BASEFOLDER}" log_data

# Define "losetup" Executable Path
LOSETUP_BIN="/usr/sbin/losetup-full"                                                  # Production (IMPORTANT: on the Real System it is /usr/sbin/losetup, in the initramfs it is /usr/bin/losetup !!!) - "losetup" also works correctly though
#LOSETUP_BIN="/usr/src/initramfs-investigation/6.8.0-40-generic/main/usr/bin/losetup" # Testing with uncompressed initramfs

# Define "losetup" Command-Line Options
#LOSETUP_OPTIONS="-b 4096"

# Timestamp
TIMESTAMP=`date +"%Y%m%d-%H%M%S"`

# Custom Function to send IOStat to Netcat
send_iostat_to_netcat() {
    # Enable Verbose Output
    set -x

    # Initialize counter
    netcatLoopCounter=0

    # Initialize Variable
    currentTimestamp=""

    while [ $netcatLoopCounter -lt ${IOSTAT_COUNT} ]
    do
        # Current Time
        currentTimestamp=`date +"%Y%m%d_%H%M%S"`

        # Echo
        /usr/bin/echo "Start Sending ${LOG_BASEFOLDER}/iostat.debug.$TIMESTAMP at Datetime = $currentTimestamp"  | log_data
        /usr/bin/echo "============================================================================================================================================================" | log_data

        # Send Data
        /usr/bin/cat "${LOG_BASEFOLDER}/iostat.debug.$TIMESTAMP" | log_data

        # Echo
        /usr/bin/echo "Finished Sending ${LOG_BASEFOLDER}/iostat.debug.$TIMESTAMP at Datetime = $currentTimestamp"  | log_data
        /usr/bin/echo "============================================================================================================================================================" | log_data

        # Wait
        /usr/bin/sleep ${IOSTAT_INTERVAL}

        # Increase Counter
        netcatLoopCounter=$((netcatLoopCounter+1))
    done

    # Exit Gracefully
    return 0
}


# Echo
${ECHO_CMD} "============================================================================================================================================================" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
${ECHO_CMD} "Starting DEBUG at $TIMESTAMP"  | log_data

# Check if Command Exists
# If not, default to "losetup"
if [ ! -x "${LOSETUP_BIN}" ]
then
    # Echo
    ${ECHO_CMD} "WARNING: the specified losetup Binary ${LOSETUP_BIN} could NOT be found and/or is NOT executable." | log_data

    if [ -x "/usr/bin/losetup" ]
    then
       LOSETUP_BIN="/usr/bin/losetup"
    elif [ -x "/usr/sbin/losetup" ]
    then
       LOSETUP_BIN="/usr/sbin/losetup"
    else
       # Echo
       ${ECHO_CMD} "WARNING: losetup Binary couldn't be automatically Detected. Defaulting to <losetup>" | log_data

       # Default Value
       LOSETUP_BIN="losetup"
    fi
fi

# Debug Shell
${ECHO_CMD} "Shell Information" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
${ECHO_CMD} "SHELL=$SHELL" | log_data
${ECHO_CMD} "0=$0"  | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data

# Debug Environment
${ECHO_CMD} "Environment Information" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
printenv | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data

# Boot Mode
if [ -d "/sys/firmware/efi" ]
then
    ${ECHO_CMD} "Folder /sys/firmware/efi was detected on this System. System Booted in UEFI Mode." | log_data
    ${ECHO_CMD} "Contents of /sys/firmware/efi Folder" | log_data
    ${ECHO_CMD} "============================================================================================================================================================" | log_data
    ls -l /sys/firmware/efi/* | log_data
    ${ECHO_CMD} "============================================================================================================================================================" | log_data
else
    ${ECHO_CMD} "Folder /sys/firmware/efi was NOT detected on this System. System Booted in BIOS Mode." | log_data
fi

# Echo
${ECHO_CMD} "INFO: Using losetup Executable / Command: ${LOSETUP_BIN}" | log_data

# List /dev/mapper/ Devices
${ECHO_CMD} "List of /dev/mapper/ Devices" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
ls -l /dev/mapper/* | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data

# List /dev/loop/ Devices
${ECHO_CMD} "List of /dev/loop/ Devices" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
ls -l /dev/loop/* | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data

# Get Output of zpool status -v
${ECHO_CMD} "Get zpool status Output" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
zpool status -v | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data

# Get Output of zfs version
${ECHO_CMD} "Get zfs version Output" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
zfs version | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data

# Get Kernel Version
${ECHO_CMD} "Get Kernel version Output" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
uname -a | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data

# Get Output of zdb -C
${ECHO_CMD} "Get zdb -C Output" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
zdb -C | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data

# Get Outout of zpool get path rpool all-vdevs
${ECHO_CMD} "Get zpool get path rpool all-vdevs Output" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
zpool get path rpool all-vdevs | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data

# Get Outout of zpool get all rpool
${ECHO_CMD} "Get zpool get all rpool Output" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
zpool get all rpool | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data

# Get Outout of zpool get all rpool all-vdevs
${ECHO_CMD} "Get zpool get all rpool all-vdevs Output" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
zpool get all rpool all-vdevs | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data

# Iterate over each Device
${ECHO_CMD} "Analysing Loop Device Details" | log_data

# !! NOT working in BUSYBOX Shell / Initramfs !!
#loopDevicesList=""
#luksDevicesList=""
#physicalDevicesList=""

# Initialize Device List
#set -- ""

# Manual "Quick-Fix" for up to 2 Physical + 2 LUKS + 2 LOOP Devices
loopDevice0=""
loopDevice1=""
luksDevice0=""
luksDevice1=""
physicalDevice0=""
physicalDevice1=""

# Initialize Device Counter
loopDeviceCounter=0

# ShellCheck shows that this triggers SC2031 - var was modified in a subshell. That change might be lost.
#${CAT_CMD} /etc/looptab | grep -vE "^#" | while IFS= read -r line;

# ShellCheck shows SC3001 - In POSIX sh, process substitution is undefined.
# Use temporary files instead
tmpFile="$(mktemp)"
${CAT_CMD} /etc/looptab | grep -vE "^#" > "$tmpFile"

while IFS= read -r line;
do
    # Extract "ID"
    loopDeviceNumber=`echo "$line" | cut -f1 -d'	'`

    # Extract "Source" Device (full Path)
    sourceDevice=`echo "$line" | cut -f2 -d'	'`

    # Extract "Loop" Device with Custom Name (full Path)
    loopDeviceCustomName=`echo "$line" | cut -f3 -d'	'`

    # Build "Standardized" Device Path
    loopDevicePath="/dev/loop$loopDeviceNumber"

    # Check if Device Exists
    if [ -b "$loopDevicePath" ]
    then
        # Analyse output of losetup --verbose
        ${ECHO_CMD} "Check Loop Device Information for $loopDevicePath"| log_data
        ${ECHO_CMD} "Executing Command: ${LOSETUP_BIN} $loopDevicePath" | log_data
        ${ECHO_CMD} "============================================================================================================================================================" | log_data
        ${LOSETUP_BIN} --verbose "$loopDevicePath" --list --output NAME,SIZELIMIT,OFFSET,AUTOCLEAR,RO,BACK-FILE,DIO,LOG-SEC,BACK-INO,BACK-MAJ:MIN,MAJ:MIN,PARTSCAN | log_data
        ${ECHO_CMD} "============================================================================================================================================================" | log_data


        # Add to List for iostat Processing later on
        #loopDevicesList="${loopDevicesList} ${loopDeviceCustomName}"
        #luksDevicesList="${luksDevicesList} ${sourceDevice}"

        # Determine the associated Physical Device
        physicalDeviceWithPartition=`lsblk -s -npo pkname "${sourceDevice}" | head -n1`
        physicalDevice=`lsblk -npo pkname "${physicalDeviceWithPartition}" | head -n1`
        #physicalDevicesList="${physicalDevicesList} ${physicalDevice}"

        # Append to Device List
        # !! NOT working in BUSYBOX Shell / Initramfs !!
        #set -- $@ ${loopDeviceCustomName} ${sourceDevice} ${physicalDevice}

        # Analyse Smartctl Output
        ${ECHO_CMD} "Analysing smartctl Ouput for $physicalDevice" | log_data
        ${ECHO_CMD} "============================================================================================================================================================" | log_data
        /usr/sbin/smartctl -a "$physicalDevice" | log_data
        ${ECHO_CMD} "============================================================================================================================================================" | log_data

        # Assign to Variable
        if [ $loopDeviceCounter -eq 0 ]
        then
            loopDevice0="$loopDeviceCustomName"
            luksDevice0="$sourceDevice"
            physicalDevice0="$physicalDevice"
        elif [ $loopDeviceCounter -eq 1 ]
        then
            loopDevice1="$loopDeviceCustomName"
            luksDevice1="$sourceDevice"
            physicalDevice1="$physicalDevice"
        fi

        # Increase Counter
        loopDeviceCounter=$((loopDeviceCounter+1))
    fi
#done # SC2031
#done < <(${CAT_CMD} /etc/looptab | grep -vE "^#") # SC3001
done < "$tmpFile"

# Save Resulting Device List
# !! NOT working in BUSYBOX Shell / Initramfs !!
#allDevices=$@

# Get dmsetup table Output
${ECHO_CMD} "Analysing dmsetup Table Ouput" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
dmsetup table | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data

# Get lsblk Output
${ECHO_CMD} "Analysing lsblk Ouput" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
lsblk --all --bytes -to +START,SIZE,TYPE --output NAME,ALIGNMENT,MIN-IO,OPT-IO,PHY-SEC,LOG-SEC,ROTA,SCHED,RQ-SIZE,RA,WSAME,START,SIZE,TYPE,MAJ:MIN | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data

# Get a "one-off" iostat Output
${ECHO_CMD} "Analysing iostat Ouput (one-off)" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data


if [ ${IOSTAT_ENABLE_ONEOFF} -eq 1 ]
then
    # !! Does NOT work in BUSYBOX / initramfs shell (especially if Variable Contains Spaces, only the space is retained) !!
    #set -- ${physicalDevicesList} ${luksDevicesList} ${loopDevicesList}
    #set -- $allDevices
    #iostat -dk -zyx $@ ${IOSTAT_INTERVAL} 1 | log_data
    iostat -dk -zyx "$physicalDevice0" "$physicalDevice1" "$luksDevice0" "$luksDevice1" "$loopDevice0" "$loopDevice1" "${IOSTAT_INTERVAL}" 1 | log_data
    ${ECHO_CMD} "============================================================================================================================================================" | log_data
fi

if [ ${IOSTAT_ENABLE_LOOP} -eq 1 ]
then
    # Launch "iostat" in the Background and save to File
    ${ECHO_CMD} "Launching iostat in the Background and saving Results to ${LOG_BASEFOLDER}/iostat.debug.$TIMESTAMP" | log_data
    touch "${LOG_BASEFOLDER}/iostat.debug.$TIMESTAMP"

    # !! Does NOT work in BUSYBOX / initramfs shell (especially if Variable Contains Spaces, only the space is retained) !!
    #set -- ${physicalDevicesList} ${luksDevicesList} ${loopDevicesList}
    #set -- $allDevices
    #iostat -dk -zyx $@ ${IOSTAT_INTERVAL} ${IOSTAT_COUNT} > ${LOG_BASEFOLDER}/iostat.debug.$TIMESTAMP &

    # Try to disable this if you have problems getting the full log over netcat (this creates additional write Requests to the already misbehaving Drive)
    iostat -dk -zyx "$physicalDevice0" "$physicalDevice1" "$luksDevice0" "$luksDevice1" "$loopDevice0" "$loopDevice1" "${IOSTAT_INTERVAL}" "${IOSTAT_COUNT}" > "${LOG_BASEFOLDER}/iostat.debug.$TIMESTAMP" &

    # Then try to periodically send via Netcat
    # Try to disable this if you have problems getting the full log over netcat
    send_iostat_to_netcat &
fi

# Force zpool reopen
# Disabled for testing on Real Booting System
#zpool reopen
#zpool reopen rpool

# Echo
${ECHO_CMD} "Ending DEBUG at $TIMESTAMP"  | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data

# Send Contents of /run/initramfs/initramfs.debug to Remote Netcat Server
if [ -f "/run/initramfs/initramfs.debug" ]
then
   ${ECHO_CMD} "Sending /run/initramfs/initramfs.debug to Remote Netcat Server" | log_data
   ${ECHO_CMD} "============================================================================================================================================================" | log_data
   ${CAT_CMD} "/run/initramfs/initramfs.debug" | log_data
   ${ECHO_CMD} "============================================================================================================================================================" | log_data
else
   ${ECHO_CMD} "WARNING: /run/initramfs/initramfs.debug could NOT be found" | log_data
   ${ECHO_CMD} "Contents of /run Folder" | log_data
   ${ECHO_CMD} "============================================================================================================================================================" | log_data
   ls -l /run/* | log_data
   ${ECHO_CMD} "============================================================================================================================================================" | log_data
   ${ECHO_CMD} "Contents of /run/initramfs Folder" | log_data
   ${ECHO_CMD} "============================================================================================================================================================" | log_data
   ls -l /run/initramfs/* | log_data
   ${ECHO_CMD} "============================================================================================================================================================" | log_data
fi

# Copy /run/initramfs/initramfs.debug to /var/log/initramfs.debug.$TIMESTAMP
if [ -f "/run/initramfs/initramfs.debug" ]
then
   ${ECHO_CMD} "Copying /run/initramfs/initramfs.debug to /var/log/initramfs.debug.$TIMESTAMP" | log_data
   cp "/run/initramfs/initramfs.debug" "/var/log/initramfs.debug.$TIMESTAMP"
fi

# Send Contents of dmesg to Remote Netcat Server
${ECHO_CMD} "Sending dmesg to Remote Netcat Server" | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data
dmesg | log_data
${ECHO_CMD} "============================================================================================================================================================" | log_data

# Dump dmesg to ${LOG_BASEFOLDER}/dmesg.debug.$TIMESTAMP
${ECHO_CMD} "Dumping dmesg to ${LOG_BASEFOLDER}/dmesg.debug.$TIMESTAMP"
dmesg > "${LOG_BASEFOLDER}/dmesg.debug.$TIMESTAMP" 2>&1

# If Running on a Live System, also send journalctl -xb to Remote Netcat Server
if [ -x "/usr/bin/journalctl" ]
then
    ${ECHO_CMD} "Sending journalctl -xb --no-pager to Remote Netcat Server" | log_data
    ${ECHO_CMD} "============================================================================================================================================================" | log_data
    /usr/bin/journalctl -xb --no-pager | log_data
    ${ECHO_CMD} "============================================================================================================================================================" | log_data

    # If /var/log is available, copy there as well
    if [ -d "/var/log" ]
    then
        ${ECHO_CMD} "Dumping journalctl -xb --no-pager to /var/log/journalctl-xb.debug.$TIMESTAMP" | log_data
        ${ECHO_CMD} "============================================================================================================================================================" | log_data
        /usr/bin/journalctl -xb --no-pager > "/var/log/journalctl-xb.debug.$TIMESTAMP"
        ${ECHO_CMD} "============================================================================================================================================================" | log_data
    fi
fi

if [ ${IOSTAT_ENABLE_MANUAL_SEND} -eq 1 ]
then
    # Manual Send Result of iostat Background Job to Remote Netcat Server
    ${ECHO_CMD} "Sending Result of iostat Background Job ${LOG_BASEFOLDER}/iostat.debug.$TIMESTAMP to Remote Netcat Server" | log_data
    ${ECHO_CMD} "============================================================================================================================================================" | log_data
    ${CAT_CMD} "${LOG_BASEFOLDER}/iostat.debug.$TIMESTAMP" | log_data
    ${ECHO_CMD} "============================================================================================================================================================" | log_data
fi

# If Running on a Live System, also send dpkg -l --no-pager to Remote Netcat Server
if [ -x "/usr/bin/dpkg" ]
then
    # List Installed Packages
    ${ECHO_CMD} "Sending dpkg -l --no-pager to Remote Netcat Server" | log_data
    ${ECHO_CMD} "============================================================================================================================================================" | log_data
    dpkg -l --no-pager  | log_data
    ${ECHO_CMD} "============================================================================================================================================================" | log_data
fi

# If Running on a Live System, also send enabled units / unit files to Remote Netcat Server
if [ -x "/usr/bin/systemctl" ]
then
    # List Systemd Units
    ${ECHO_CMD} "Sending systemctl list-units --no-pager to Remote Netcat Server" | log_data
    ${ECHO_CMD} "============================================================================================================================================================" | log_data
    systemctl list-units --no-pager  | log_data
    ${ECHO_CMD} "============================================================================================================================================================" | log_data

    # List Systemd Unit Files
    ${ECHO_CMD} "Sending systemctl list-unit-files --no-pager to Remote Netcat Server" | log_data
    ${ECHO_CMD} "============================================================================================================================================================" | log_data
    systemctl list-unit-files --no-pager  | log_data
    ${ECHO_CMD} "============================================================================================================================================================" | log_data
fi

# Do again a a-posteriori analysis of /dev/loop/*, /dev/mapper/*, etc



# Return OK Code
exit 0
